package me.javapacker.steps.impl;

import me.javapacker.file.api.PackerFilesManager;
import me.javapacker.steps.api.PackerStep;
import org.apache.commons.io.IOUtils;
import org.objectweb.asm.*;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.util.zip.ZipOutputStream;

public class S05JoinLoader extends PackerStep implements Opcodes {

    private final Map<String, byte[]> includeClasses = new HashMap<>();

    public S05JoinLoader(PackerFilesManager packerFilesManager) {
        super(packerFilesManager);
    }

    @Override
    public boolean completeStep() {
        includeClasses.putIfAbsent("me/javapacker/Main", mainDump());
        includeClasses.putIfAbsent("me/javapacker/PackerClassLoader", classLoaderDump());
        includeClasses.putIfAbsent("me/javapacker/Util", utilDump());
        //Can not be in <init>


        try {
            final ZipOutputStream out = getPackerFilesManager().asZipOutputStream();
            this.includeClasses.forEach((name, array) -> {
                ZipEntry entry = new ZipEntry(name + ".class");
                try {
                    out.putNextEntry(entry);
                    out.write(array);
                    out.closeEntry();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            });
        }
        catch (Exception e)
        {
            logMessage(Level.WARNING, "S05JoinLoader failed!");
            e.printStackTrace();
            return false;
        }
        logMessage(Level.INFO, "S05JoinLoader completed!");
        return checkNext();
    }

    public static byte[] utilDump() {

        ClassWriter cw = new ClassWriter(0);
        FieldVisitor fv;
        MethodVisitor mv;
        AnnotationVisitor av0;

        cw.visit(V1_8, ACC_PUBLIC + ACC_SUPER, "me/javapacker/Util", null, "java/lang/Object", null);


        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(7, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
            mv.visitInsn(RETURN);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLocalVariable("this", "Lme/javapacker/Util;", null, l0, l1, 0);
            mv.visitMaxs(1, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "readAllBytes", "(Ljava/io/InputStream;)[B", null, new String[] { "java/io/IOException" });
            mv.visitCode();
            Label l0 = new Label();
            Label l1 = new Label();
            Label l2 = new Label();
            mv.visitTryCatchBlock(l0, l1, l2, "java/lang/Throwable");
            Label l3 = new Label();
            Label l4 = new Label();
            Label l5 = new Label();
            mv.visitTryCatchBlock(l3, l4, l5, "java/io/IOException");
            Label l6 = new Label();
            Label l7 = new Label();
            Label l8 = new Label();
            mv.visitTryCatchBlock(l6, l7, l8, "java/lang/Throwable");
            Label l9 = new Label();
            mv.visitTryCatchBlock(l6, l7, l9, null);
            Label l10 = new Label();
            Label l11 = new Label();
            Label l12 = new Label();
            mv.visitTryCatchBlock(l10, l11, l12, "java/lang/Throwable");
            Label l13 = new Label();
            mv.visitTryCatchBlock(l8, l13, l9, null);
            Label l14 = new Label();
            Label l15 = new Label();
            Label l16 = new Label();
            mv.visitTryCatchBlock(l14, l15, l16, "java/io/IOException");
            mv.visitTryCatchBlock(l8, l16, l16, "java/io/IOException");
            Label l17 = new Label();
            mv.visitTryCatchBlock(l14, l15, l17, null);
            Label l18 = new Label();
            Label l19 = new Label();
            Label l20 = new Label();
            mv.visitTryCatchBlock(l18, l19, l20, "java/io/IOException");
            Label l21 = new Label();
            mv.visitTryCatchBlock(l8, l21, l17, null);
            Label l22 = new Label();
            mv.visitLabel(l22);
            mv.visitLineNumber(10, l22);
            mv.visitIntInsn(SIPUSH, 4096);
            mv.visitVarInsn(ISTORE, 1);
            Label l23 = new Label();
            mv.visitLabel(l23);
            mv.visitLineNumber(11, l23);
            mv.visitIntInsn(SIPUSH, 4096);
            mv.visitIntInsn(NEWARRAY, T_BYTE);
            mv.visitVarInsn(ASTORE, 2);
            Label l24 = new Label();
            mv.visitLabel(l24);
            mv.visitLineNumber(13, l24);
            mv.visitInsn(ACONST_NULL);
            mv.visitVarInsn(ASTORE, 4);
            mv.visitLabel(l14);
            mv.visitLineNumber(16, l14);
            mv.visitTypeInsn(NEW, "java/io/ByteArrayOutputStream");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/io/ByteArrayOutputStream", "<init>", "()V", false);
            mv.visitVarInsn(ASTORE, 5);
            Label l25 = new Label();
            mv.visitLabel(l25);
            mv.visitInsn(ACONST_NULL);
            mv.visitVarInsn(ASTORE, 6);
            mv.visitLabel(l6);
            mv.visitLineNumber(17, l6);
            mv.visitFrame(Opcodes.F_FULL, 7, new Object[] {"java/io/InputStream", Opcodes.INTEGER, "[B", Opcodes.TOP, "java/io/IOException", "java/io/ByteArrayOutputStream", "java/lang/Throwable"}, 0, new Object[] {});
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitInsn(ICONST_0);
            mv.visitIntInsn(SIPUSH, 4096);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "read", "([BII)I", false);
            mv.visitInsn(DUP);
            mv.visitVarInsn(ISTORE, 3);
            Label l26 = new Label();
            mv.visitLabel(l26);
            mv.visitInsn(ICONST_M1);
            Label l27 = new Label();
            mv.visitJumpInsn(IF_ICMPEQ, l27);
            Label l28 = new Label();
            mv.visitLabel(l28);
            mv.visitLineNumber(18, l28);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/ByteArrayOutputStream", "write", "([BII)V", false);
            mv.visitJumpInsn(GOTO, l6);
            mv.visitLabel(l27);
            mv.visitLineNumber(20, l27);
            mv.visitFrame(Opcodes.F_FULL, 7, new Object[] {"java/io/InputStream", Opcodes.INTEGER, "[B", Opcodes.INTEGER, "java/io/IOException", "java/io/ByteArrayOutputStream", "java/lang/Throwable"}, 0, new Object[] {});
            mv.visitVarInsn(ALOAD, 5);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/ByteArrayOutputStream", "toByteArray", "()[B", false);
            mv.visitVarInsn(ASTORE, 7);
            mv.visitLabel(l7);
            mv.visitLineNumber(21, l7);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitJumpInsn(IFNULL, l15);
            mv.visitVarInsn(ALOAD, 6);
            Label l29 = new Label();
            mv.visitJumpInsn(IFNULL, l29);
            mv.visitLabel(l0);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/ByteArrayOutputStream", "close", "()V", false);
            mv.visitLabel(l1);
            mv.visitJumpInsn(GOTO, l15);
            mv.visitLabel(l2);
            mv.visitFrame(Opcodes.F_FULL, 8, new Object[] {"java/io/InputStream", Opcodes.INTEGER, "[B", Opcodes.INTEGER, "java/io/IOException", "java/io/ByteArrayOutputStream", "java/lang/Throwable", "[B"}, 1, new Object[] {"java/lang/Throwable"});
            mv.visitVarInsn(ASTORE, 8);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitVarInsn(ALOAD, 8);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Throwable", "addSuppressed", "(Ljava/lang/Throwable;)V", false);
            mv.visitJumpInsn(GOTO, l15);
            mv.visitLabel(l29);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/ByteArrayOutputStream", "close", "()V", false);
            mv.visitLabel(l15);
            mv.visitLineNumber(26, l15);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitJumpInsn(IFNONNULL, l3);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "close", "()V", false);
            Label l30 = new Label();
            mv.visitJumpInsn(GOTO, l30);
            mv.visitLabel(l3);
            mv.visitLineNumber(28, l3);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "close", "()V", false);
            mv.visitLabel(l4);
            mv.visitLineNumber(31, l4);
            mv.visitJumpInsn(GOTO, l30);
            mv.visitLabel(l5);
            mv.visitLineNumber(29, l5);
            mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/io/IOException"});
            mv.visitVarInsn(ASTORE, 8);
            Label l31 = new Label();
            mv.visitLabel(l31);
            mv.visitLineNumber(30, l31);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitVarInsn(ALOAD, 8);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "addSuppressed", "(Ljava/lang/Throwable;)V", false);
            mv.visitLabel(l30);
            mv.visitLineNumber(20, l30);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ALOAD, 7);
            mv.visitInsn(ARETURN);
            mv.visitLabel(l8);
            mv.visitLineNumber(16, l8);
            mv.visitFrame(Opcodes.F_FULL, 7, new Object[] {"java/io/InputStream", Opcodes.INTEGER, "[B", Opcodes.TOP, "java/io/IOException", "java/io/ByteArrayOutputStream", "java/lang/Throwable"}, 1, new Object[] {"java/lang/Throwable"});
            mv.visitVarInsn(ASTORE, 7);
            mv.visitVarInsn(ALOAD, 7);
            mv.visitVarInsn(ASTORE, 6);
            mv.visitVarInsn(ALOAD, 7);
            mv.visitInsn(ATHROW);
            mv.visitLabel(l9);
            mv.visitLineNumber(21, l9);
            mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Throwable"});
            mv.visitVarInsn(ASTORE, 9);
            mv.visitLabel(l13);
            mv.visitVarInsn(ALOAD, 5);
            Label l32 = new Label();
            mv.visitJumpInsn(IFNULL, l32);
            mv.visitVarInsn(ALOAD, 6);
            Label l33 = new Label();
            mv.visitJumpInsn(IFNULL, l33);
            mv.visitLabel(l10);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/ByteArrayOutputStream", "close", "()V", false);
            mv.visitLabel(l11);
            mv.visitJumpInsn(GOTO, l32);
            mv.visitLabel(l12);
            mv.visitFrame(Opcodes.F_FULL, 10, new Object[] {"java/io/InputStream", Opcodes.INTEGER, "[B", Opcodes.TOP, "java/io/IOException", "java/io/ByteArrayOutputStream", "java/lang/Throwable", Opcodes.TOP, Opcodes.TOP, "java/lang/Throwable"}, 1, new Object[] {"java/lang/Throwable"});
            mv.visitVarInsn(ASTORE, 10);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Throwable", "addSuppressed", "(Ljava/lang/Throwable;)V", false);
            mv.visitJumpInsn(GOTO, l32);
            mv.visitLabel(l33);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/ByteArrayOutputStream", "close", "()V", false);
            mv.visitLabel(l32);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitInsn(ATHROW);
            mv.visitLabel(l16);
            mv.visitLineNumber(22, l16);
            mv.visitFrame(Opcodes.F_FULL, 5, new Object[] {"java/io/InputStream", Opcodes.INTEGER, "[B", Opcodes.TOP, "java/io/IOException"}, 1, new Object[] {"java/io/IOException"});
            mv.visitVarInsn(ASTORE, 5);
            Label l34 = new Label();
            mv.visitLabel(l34);
            mv.visitLineNumber(23, l34);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitVarInsn(ASTORE, 4);
            Label l35 = new Label();
            mv.visitLabel(l35);
            mv.visitLineNumber(24, l35);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitInsn(ATHROW);
            mv.visitLabel(l17);
            mv.visitLineNumber(26, l17);
            mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Throwable"});
            mv.visitVarInsn(ASTORE, 11);
            mv.visitLabel(l21);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitJumpInsn(IFNONNULL, l18);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "close", "()V", false);
            Label l36 = new Label();
            mv.visitJumpInsn(GOTO, l36);
            mv.visitLabel(l18);
            mv.visitLineNumber(28, l18);
            mv.visitFrame(Opcodes.F_FULL, 12, new Object[] {"java/io/InputStream", Opcodes.INTEGER, "[B", Opcodes.TOP, "java/io/IOException", Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, "java/lang/Throwable"}, 0, new Object[] {});
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "close", "()V", false);
            mv.visitLabel(l19);
            mv.visitLineNumber(31, l19);
            mv.visitJumpInsn(GOTO, l36);
            mv.visitLabel(l20);
            mv.visitLineNumber(29, l20);
            mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/io/IOException"});
            mv.visitVarInsn(ASTORE, 12);
            Label l37 = new Label();
            mv.visitLabel(l37);
            mv.visitLineNumber(30, l37);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitVarInsn(ALOAD, 12);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "addSuppressed", "(Ljava/lang/Throwable;)V", false);
            mv.visitLabel(l36);
            mv.visitLineNumber(32, l36);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ALOAD, 11);
            mv.visitInsn(ATHROW);
            Label l38 = new Label();
            mv.visitLabel(l38);
            mv.visitMaxs(4, 13);
            mv.visitEnd();
        }
        cw.visitEnd();

        return cw.toByteArray();
    }


    public static byte[] classLoaderDump ()  {

        ClassWriter cw = new ClassWriter(0);
        FieldVisitor fv;
        MethodVisitor mv;
        AnnotationVisitor av0;

        cw.visit(V1_8, ACC_PUBLIC + ACC_SUPER, "me/javapacker/PackerClassLoader", null, "java/lang/ClassLoader", null);

        cw.visitSource("PackerClassLoader.java", null);

        {
            fv = cw.visitField(ACC_PRIVATE + ACC_FINAL, "classes", "Ljava/util/HashMap;", "Ljava/util/HashMap<Ljava/lang/String;[B>;", null);
            fv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "(Ljava/lang/ClassLoader;Ljava/util/jar/JarInputStream;)V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(19, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "<init>", "(Ljava/lang/ClassLoader;)V", false);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(16, l1);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitTypeInsn(NEW, "java/util/HashMap");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/util/HashMap", "<init>", "()V", false);
            mv.visitFieldInsn(PUTFIELD, "me/javapacker/PackerClassLoader", "classes", "Ljava/util/HashMap;");
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(20, l2);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "me/javapacker/PackerClassLoader", "loadResources", "(Ljava/util/jar/JarInputStream;)V", false);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(21, l3);
            mv.visitInsn(RETURN);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLocalVariable("this", "Lme/javapacker/PackerClassLoader;", null, l0, l4, 0);
            mv.visitLocalVariable("parent", "Ljava/lang/ClassLoader;", null, l0, l4, 1);
            mv.visitLocalVariable("stream", "Ljava/util/jar/JarInputStream;", null, l0, l4, 2);
            mv.visitMaxs(3, 3);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "getResourceAsStream", "(Ljava/lang/String;)Ljava/io/InputStream;", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(25, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "getResourceAsStream", "(Ljava/lang/String;)Ljava/io/InputStream;", false);
            mv.visitInsn(ARETURN);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLocalVariable("this", "Lme/javapacker/PackerClassLoader;", null, l0, l1, 0);
            mv.visitLocalVariable("name", "Ljava/lang/String;", null, l0, l1, 1);
            mv.visitMaxs(2, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "getResource", "(Ljava/lang/String;)Ljava/net/URL;", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(30, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "getResource", "(Ljava/lang/String;)Ljava/net/URL;", false);
            mv.visitInsn(ARETURN);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLocalVariable("this", "Lme/javapacker/PackerClassLoader;", null, l0, l1, 0);
            mv.visitLocalVariable("name", "Ljava/lang/String;", null, l0, l1, 1);
            mv.visitMaxs(2, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PROTECTED, "findResources", "(Ljava/lang/String;)Ljava/util/Enumeration;", "(Ljava/lang/String;)Ljava/util/Enumeration<Ljava/net/URL;>;", new String[] { "java/io/IOException" });
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(35, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "findResources", "(Ljava/lang/String;)Ljava/util/Enumeration;", false);
            mv.visitInsn(ARETURN);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLocalVariable("this", "Lme/javapacker/PackerClassLoader;", null, l0, l1, 0);
            mv.visitLocalVariable("name", "Ljava/lang/String;", null, l0, l1, 1);
            mv.visitMaxs(2, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "findClass", "(Ljava/lang/String;)Ljava/lang/Class;", "(Ljava/lang/String;)Ljava/lang/Class<*>;", new String[] { "java/lang/ClassNotFoundException" });
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(41, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitLdcInsn(".class");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "me/javapacker/PackerClassLoader", "getClass", "(Ljava/lang/String;)[B", false);
            mv.visitVarInsn(ASTORE, 2);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(42, l1);
            mv.visitVarInsn(ALOAD, 2);
            Label l2 = new Label();
            mv.visitJumpInsn(IFNULL, l2);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(43, l3);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitInsn(ARRAYLENGTH);
            mv.visitLdcInsn(Type.getType("Lme/javapacker/Main;"));
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getProtectionDomain", "()Ljava/security/ProtectionDomain;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "me/javapacker/PackerClassLoader", "defineClass", "(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class;", false);
            mv.visitInsn(ARETURN);
            mv.visitLabel(l2);
            mv.visitLineNumber(45, l2);
            mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"[B"}, 0, null);
            mv.visitTypeInsn(NEW, "java/lang/ClassNotFoundException");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassNotFoundException", "<init>", "(Ljava/lang/String;)V", false);
            mv.visitInsn(ATHROW);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLocalVariable("this", "Lme/javapacker/PackerClassLoader;", null, l0, l4, 0);
            mv.visitLocalVariable("name", "Ljava/lang/String;", null, l0, l4, 1);
            mv.visitLocalVariable("data", "[B", null, l1, l4, 2);
            mv.visitMaxs(6, 3);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "loadResources", "(Ljava/util/jar/JarInputStream;)V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            Label l1 = new Label();
            Label l2 = new Label();
            mv.visitTryCatchBlock(l0, l1, l2, "java/io/IOException");
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(50, l3);
            mv.visitIntInsn(SIPUSH, 1024);
            mv.visitIntInsn(NEWARRAY, T_BYTE);
            mv.visitVarInsn(ASTORE, 2);
            mv.visitLabel(l0);
            mv.visitLineNumber(54, l0);
            mv.visitInsn(ACONST_NULL);
            mv.visitVarInsn(ASTORE, 4);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(55, l4);
            mv.visitFrame(Opcodes.F_APPEND,3, new Object[] {"[B", Opcodes.TOP, "java/util/jar/JarEntry"}, 0, null);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/jar/JarInputStream", "getNextJarEntry", "()Ljava/util/jar/JarEntry;", false);
            mv.visitInsn(DUP);
            mv.visitVarInsn(ASTORE, 4);
            mv.visitJumpInsn(IFNULL, l1);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitLineNumber(56, l5);
            mv.visitTypeInsn(NEW, "java/io/ByteArrayOutputStream");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/io/ByteArrayOutputStream", "<init>", "()V", false);
            mv.visitVarInsn(ASTORE, 5);
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitLineNumber(57, l6);
            mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/io/ByteArrayOutputStream"}, 0, null);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/jar/JarInputStream", "read", "([B)I", false);
            mv.visitInsn(DUP);
            mv.visitVarInsn(ISTORE, 3);
            Label l7 = new Label();
            mv.visitLabel(l7);
            mv.visitInsn(ICONST_M1);
            Label l8 = new Label();
            mv.visitJumpInsn(IF_ICMPEQ, l8);
            Label l9 = new Label();
            mv.visitLabel(l9);
            mv.visitLineNumber(58, l9);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/ByteArrayOutputStream", "write", "([BII)V", false);
            mv.visitJumpInsn(GOTO, l6);
            mv.visitLabel(l8);
            mv.visitLineNumber(60, l8);
            mv.visitFrame(Opcodes.F_FULL, 6, new Object[] {"me/javapacker/PackerClassLoader", "java/util/jar/JarInputStream", "[B", Opcodes.INTEGER, "java/util/jar/JarEntry", "java/io/ByteArrayOutputStream"}, 0, new Object[] {});
            mv.visitVarInsn(ALOAD, 5);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/ByteArrayOutputStream", "close", "()V", false);
            Label l10 = new Label();
            mv.visitLabel(l10);
            mv.visitLineNumber(61, l10);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/ByteArrayOutputStream", "toByteArray", "()[B", false);
            mv.visitVarInsn(ASTORE, 6);
            Label l11 = new Label();
            mv.visitLabel(l11);
            mv.visitLineNumber(62, l11);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/jar/JarEntry", "getName", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "toLowerCase", "()Ljava/lang/String;", false);
            mv.visitLdcInsn(".class");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "endsWith", "(Ljava/lang/String;)Z", false);
            Label l12 = new Label();
            mv.visitJumpInsn(IFEQ, l12);
            Label l13 = new Label();
            mv.visitLabel(l13);
            mv.visitLineNumber(63, l13);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "me/javapacker/PackerClassLoader", "classes", "Ljava/util/HashMap;");
            mv.visitVarInsn(ALOAD, 4);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/jar/JarEntry", "getName", "()Ljava/lang/String;", false);
            mv.visitLdcInsn("/");
            mv.visitLdcInsn(".");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "replaceAll", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", false);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/HashMap", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
            mv.visitInsn(POP);
            mv.visitLabel(l12);
            mv.visitLineNumber(65, l12);
            mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
            mv.visitJumpInsn(GOTO, l4);
            mv.visitLabel(l1);
            mv.visitLineNumber(68, l1);
            mv.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
            Label l14 = new Label();
            mv.visitJumpInsn(GOTO, l14);
            mv.visitLabel(l2);
            mv.visitLineNumber(66, l2);
            mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/io/IOException"});
            mv.visitVarInsn(ASTORE, 4);
            Label l15 = new Label();
            mv.visitLabel(l15);
            mv.visitLineNumber(67, l15);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "()V", false);
            mv.visitLabel(l14);
            mv.visitLineNumber(69, l14);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitInsn(RETURN);
            Label l16 = new Label();
            mv.visitLabel(l16);
            mv.visitLocalVariable("out", "Ljava/io/ByteArrayOutputStream;", null, l6, l12, 5);
            mv.visitLocalVariable("array", "[B", null, l11, l12, 6);
            mv.visitLocalVariable("count", "I", null, l7, l1, 3);
            mv.visitLocalVariable("entry", "Ljava/util/jar/JarEntry;", null, l4, l1, 4);
            mv.visitLocalVariable("e", "Ljava/io/IOException;", null, l15, l14, 4);
            mv.visitLocalVariable("this", "Lme/javapacker/PackerClassLoader;", null, l3, l16, 0);
            mv.visitLocalVariable("stream", "Ljava/util/jar/JarInputStream;", null, l3, l16, 1);
            mv.visitLocalVariable("buffer", "[B", null, l0, l16, 2);
            mv.visitMaxs(4, 7);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "getClass", "(Ljava/lang/String;)[B", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(72, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "me/javapacker/PackerClassLoader", "classes", "Ljava/util/HashMap;");
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/HashMap", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
            mv.visitTypeInsn(CHECKCAST, "[B");
            mv.visitVarInsn(ASTORE, 2);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(73, l1);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "me/javapacker/PackerClassLoader", "classes", "Ljava/util/HashMap;");
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/HashMap", "remove", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
            mv.visitInsn(POP);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(74, l2);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitInsn(ARETURN);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitMaxs(2, 3);
            mv.visitEnd();
        }
        cw.visitEnd();

        return cw.toByteArray();
    }


    public byte[] mainDump() {

        ClassWriter cw = new ClassWriter(0);
        MethodVisitor mv;

        cw.visit(V1_8, ACC_PUBLIC + ACC_SUPER, "me/javapacker/Main", null, "java/lang/Object", null);

        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(17, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
            mv.visitInsn(RETURN);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitMaxs(1, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "main", "([Ljava/lang/String;)V", null, new String[] { "java/lang/Exception" });
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(20, l0);
            mv.visitTypeInsn(NEW, "java/util/zip/ZipFile");
            mv.visitInsn(DUP);
            mv.visitLdcInsn(Type.getType("Lme/javapacker/Main;"));
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getProtectionDomain", "()Ljava/security/ProtectionDomain;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/security/ProtectionDomain", "getCodeSource", "()Ljava/security/CodeSource;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/security/CodeSource", "getLocation", "()Ljava/net/URL;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/URL", "getPath", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKESPECIAL, "java/util/zip/ZipFile", "<init>", "(Ljava/lang/String;)V", false);
            mv.visitVarInsn(ASTORE, 1);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(21, l1);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitLdcInsn(getPackerFilesManager().getEncryptable().getEncryptableConfig());
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/zip/ZipFile", "getEntry", "(Ljava/lang/String;)Ljava/util/zip/ZipEntry;", false);
            mv.visitVarInsn(ASTORE, 2);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(22, l2);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/zip/ZipFile", "getInputStream", "(Ljava/util/zip/ZipEntry;)Ljava/io/InputStream;", false);
            mv.visitVarInsn(ASTORE, 3);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(23, l3);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKESTATIC, "me/javapacker/Util", "readAllBytes", "(Ljava/io/InputStream;)[B", false);
            mv.visitVarInsn(ASTORE, 4);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(24, l4);
            mv.visitTypeInsn(NEW, "java/io/ByteArrayInputStream");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitMethodInsn(INVOKESPECIAL, "java/io/ByteArrayInputStream", "<init>", "([B)V", false);
            mv.visitVarInsn(ASTORE, 5);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitLineNumber(25, l5);
            mv.visitTypeInsn(NEW, "java/io/DataInputStream");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitMethodInsn(INVOKESPECIAL, "java/io/DataInputStream", "<init>", "(Ljava/io/InputStream;)V", false);
            mv.visitVarInsn(ASTORE, 6);
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitLineNumber(26, l6);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/DataInputStream", "readUTF", "()Ljava/lang/String;", false);
            mv.visitVarInsn(ASTORE, 7);
            Label l8 = new Label();
            mv.visitLabel(l8);
            mv.visitLineNumber(28, l8);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/DataInputStream", "readUTF", "()Ljava/lang/String;", false);
            mv.visitVarInsn(ASTORE, 8);
            Label l10 = new Label();
            mv.visitLabel(l10);
            mv.visitLineNumber(30, l10);
            mv.visitLdcInsn(Type.getType("Lme/javapacker/Main;"));
            mv.visitLdcInsn("/" + getPackerFilesManager().getEncryptable().getEncryptableFile());
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getResourceAsStream", "(Ljava/lang/String;)Ljava/io/InputStream;", false);
            mv.visitVarInsn(ASTORE, 9);
            Label l11 = new Label();
            mv.visitLabel(l11);
            mv.visitLineNumber(31, l11);
            mv.visitLdcInsn("AES/CBC/NOPADDING");
            mv.visitMethodInsn(INVOKESTATIC, "javax/crypto/Cipher", "getInstance", "(Ljava/lang/String;)Ljavax/crypto/Cipher;", false);
            mv.visitVarInsn(ASTORE, 10);
            Label l12 = new Label();
            mv.visitLabel(l12);
            mv.visitLineNumber(32, l12);
            mv.visitTypeInsn(NEW, "javax/crypto/spec/SecretKeySpec");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 8);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "getBytes", "()[B", false);
            mv.visitLdcInsn("AES");
            mv.visitMethodInsn(INVOKESPECIAL, "javax/crypto/spec/SecretKeySpec", "<init>", "([BLjava/lang/String;)V", false);
            mv.visitVarInsn(ASTORE, 11);
            Label l13 = new Label();
            mv.visitLabel(l13);
            mv.visitLineNumber(33, l13);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitInsn(ICONST_2);
            mv.visitVarInsn(ALOAD, 11);
            mv.visitTypeInsn(NEW, "javax/crypto/spec/IvParameterSpec");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 8);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "getBytes", "()[B", false);
            mv.visitMethodInsn(INVOKESPECIAL, "javax/crypto/spec/IvParameterSpec", "<init>", "([B)V", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "javax/crypto/Cipher", "init", "(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V", false);
            Label l14 = new Label();
            mv.visitLabel(l14);
            mv.visitLineNumber(34, l14);
            mv.visitTypeInsn(NEW, "java/util/jar/JarInputStream");
            mv.visitInsn(DUP);
            mv.visitTypeInsn(NEW, "javax/crypto/CipherInputStream");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitMethodInsn(INVOKESPECIAL, "javax/crypto/CipherInputStream", "<init>", "(Ljava/io/InputStream;Ljavax/crypto/Cipher;)V", false);
            mv.visitMethodInsn(INVOKESPECIAL, "java/util/jar/JarInputStream", "<init>", "(Ljava/io/InputStream;)V", false);
            mv.visitVarInsn(ASTORE, 12);
            Label l15 = new Label();
            mv.visitLabel(l15);
            mv.visitLineNumber(35, l15);
            mv.visitTypeInsn(NEW, "me/javapacker/PackerClassLoader");
            mv.visitInsn(DUP);
            mv.visitLdcInsn(Type.getType("Lme/javapacker/Main;"));
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getClassLoader", "()Ljava/lang/ClassLoader;", false);
            mv.visitVarInsn(ALOAD, 12);
            mv.visitMethodInsn(INVOKESPECIAL, "me/javapacker/PackerClassLoader", "<init>", "(Ljava/lang/ClassLoader;Ljava/util/jar/JarInputStream;)V", false);
            mv.visitVarInsn(ASTORE, 13);
            Label l16 = new Label();
            mv.visitLabel(l16);
            mv.visitLineNumber(37, l16);
            mv.visitVarInsn(ALOAD, 13);
            mv.visitVarInsn(ALOAD, 7);
            mv.visitMethodInsn(INVOKEVIRTUAL, "me/javapacker/PackerClassLoader", "loadClass", "(Ljava/lang/String;)Ljava/lang/Class;", false);
            mv.visitVarInsn(ASTORE, 14);
            Label l17 = new Label();
            mv.visitLabel(l17);
            mv.visitLineNumber(38, l17);
            mv.visitVarInsn(ALOAD, 14);
            mv.visitLdcInsn("main");
            mv.visitInsn(ICONST_1);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/Class");
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_0);
            mv.visitLdcInsn(Type.getType("[Ljava/lang/String;"));
            mv.visitInsn(AASTORE);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", false);
            mv.visitVarInsn(ASTORE, 15);
            Label l18 = new Label();
            mv.visitLabel(l18);
            mv.visitLineNumber(40, l18);
            mv.visitVarInsn(ALOAD, 15);
            mv.visitVarInsn(ALOAD, 14);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "newInstance", "()Ljava/lang/Object;", false);
            mv.visitInsn(ICONST_1);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/Object");
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(AASTORE);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Method", "invoke", "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;", false);
            mv.visitInsn(POP);
            Label l19 = new Label();
            mv.visitLabel(l19);
            mv.visitLineNumber(42, l19);
            mv.visitVarInsn(ALOAD, 12);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/jar/JarInputStream", "close", "()V", false);
            Label l20 = new Label();
            mv.visitLabel(l20);
            mv.visitLineNumber(43, l20);
            mv.visitInsn(RETURN);
            Label l21 = new Label();
            mv.visitLabel(l21);
            mv.visitMaxs(6, 16);
            mv.visitEnd();
        }
        cw.visitEnd();

        return cw.toByteArray();
    }


}
